{"version":3,"sources":["Todos.jsx","Control.jsx","actions.js","App.jsx","serviceWorker.js","store.js","reducers.js","index.js"],"names":["TodoItem","memo","props","todo","id","text","complete","toggleTodo","removeTodo","className","type","onChange","checked","classnames","onClick","Todos","todos","map","key","isSeq","Date","now","Control","addTodo","inputRef","useRef","onSubmit","e","preventDefault","newText","current","value","trim","length","placeholder","ref","newTodo","dispatch","getState","find","payload","LS_KEY","connect","state","controlCbs","useMemo","bindActionCreators","todosCbs","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","Boolean","window","location","hostname","match","createStore","action","filter","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50279823.chunk.js","sourcesContent":["import React ,{\r\n  memo\r\n}from 'react';\r\nimport './Todos.css';\r\nimport classnames from 'classnames'\r\n\r\n\r\nconst TodoItem = memo(function TodoItem(props) {\r\n  const {\r\n    todo:{\r\n      id,\r\n      text,\r\n      complete\r\n    },\r\n    toggleTodo,\r\n    removeTodo,\r\n  }=props\r\n\r\n  const onChange=()=>{\r\n    toggleTodo(id)\r\n  }\r\n\r\n  const onRemove=()=>{\r\n    removeTodo(id)\r\n  }\r\n\r\n  return (\r\n    <li className=\"todo-item\">\r\n      <input \r\n        type=\"checkbox\" \r\n        onChange={onChange} \r\n        checked={complete}\r\n      />\r\n      <label className={classnames({complete})}>{text}</label>\r\n      <button onClick={onRemove}>&#xd7;</button>\r\n    </li>\r\n  )\r\n})\r\n\r\n\r\n//列表区用来展示所有的待办\r\nconst Todos = memo(function Todos(props) {\r\n  const {todos,toggleTodo,removeTodo} = props\r\n  return (\r\n    <ul >\r\n      {\r\n        todos.map(todo=>{\r\n          return <TodoItem \r\n                  key={todo.id}\r\n                  todo={todo}\r\n                  toggleTodo={toggleTodo}\r\n                  removeTodo={removeTodo}\r\n                />\r\n        })\r\n      }\r\n    </ul>\r\n  );\r\n})\r\n\r\nexport default Todos;","import React ,{\r\n  useRef,\r\n  memo\r\n}from 'react';\r\nimport './Control.css';\r\n\r\nlet isSeq = Date.now()\r\n\r\n//输入区，用来提交和输入最新的待办\r\nconst Control = memo(function Control(props) {\r\n  const {addTodo}=props\r\n  const inputRef = useRef()\r\n\r\n  const onSubmit = (e)=>{\r\n    e.preventDefault()\r\n    let newText = inputRef.current.value.trim()\r\n    if(newText.length===0){\r\n      return\r\n    }\r\n    addTodo({\r\n      id:++isSeq,\r\n      text:newText,\r\n      complete:false\r\n    })\r\n    inputRef.current.value=''\r\n  }\r\n  \r\n  return (\r\n    <div className=\"control\">\r\n      <h1>todos</h1>\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"text\" className=\"new-todo\" \r\n               placeholder=\"What need to be done?\"\r\n               ref={inputRef}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default Control;","export function addTodo(newTodo) {\r\n  return (dispatch,getState)=>{\r\n    const {todos} = getState()\r\n    if (!todos.find(todo=>todo.text===newTodo.text)) {\r\n      dispatch ({\r\n        type:'add',\r\n        payload:newTodo\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nexport function setTodo(init) {\r\n  return{\r\n    type:'set',\r\n    payload:init\r\n  }\r\n}\r\n\r\nexport function removeTodo(id) {\r\n  return{\r\n    type:'remove',\r\n    payload:id\r\n  }\r\n}\r\n\r\nexport function toggleTodo(id) {\r\n  return{\r\n    type:'toggle',\r\n    payload:id\r\n  }\r\n}","import React ,{\n  useCallback,\n  useEffect,\n  useMemo\n}from 'react';\nimport './App.css';\nimport Todos from './Todos'\nimport Control from './Control'\nimport { connect } from \"react-redux\"\nimport { bindActionCreators } from \"redux\"\nimport {\n  addTodo,\n  setTodo,\n  removeTodo,\n  toggleTodo,\n} from './actions'\n\nconst LS_KEY = '_$-todos_'\n\n\n\nfunction App(props) {\n  const{\n    todos,\n    dispatch\n  }=props\n\n\n  const controlCbs = useMemo(()=>{\n    return bindActionCreators({\n      addTodo\n    },dispatch)\n  },[])\n\n  const todosCbs = useMemo(()=>{\n    return bindActionCreators({\n      removeTodo,\n      toggleTodo\n    },dispatch)\n  },[])\n  \n  //只需在程序启动时执行一次\n  useEffect(()=>{\n    const todos = JSON.parse(localStorage.getItem(LS_KEY) || \"[]\")\n    dispatch(setTodo(todos))\n  },[])\n  \n  useEffect(()=>{\n    localStorage.setItem(LS_KEY,JSON.stringify(todos))\n  },[todos])\n  \n  return (\n    <div className=\"todo-list\">\n      <Control \n        {...controlCbs}\n      />\n      <Todos \n        {...todosCbs}\n        todos={todos}\n      />\n    </div>\n  );\n}\n\n\nexport default connect(\n  function mapStateToProps(state) { //这里的state就是当前的store里面的state\n    return state\n  },\n  function mapDispatchToProps(dispatch) {\n    return { dispatch } //对象的键是dispat，只是传进来的参数，相当于{dispatch:dispatch}\n  }\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  createStore,\r\n  applyMiddleware\r\n} from 'redux'\r\n\r\nimport reducers from './reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\n\r\nexport default createStore(\r\n  reducers,\r\n  {\r\n   todos:[],\r\n  },\r\n  applyMiddleware(thunk)\r\n)\r\n\r\n\r\n","   \r\nexport default function reducer(state={todos:[]},action){\r\n                  const {type,payload}=action\r\n                  const {todos} = state\r\n                  switch (type) {\r\n                    case 'set':\r\n                      return {\r\n                        todos:payload\r\n                      }\r\n\r\n                    case 'add':\r\n                      return {\r\n                        todos:[...todos,payload]\r\n                      }\r\n\r\n                    case 'remove':\r\n                      return {\r\n                        todos: todos.filter(todo=>{\r\n                          return todo.id!==payload\r\n                        })\r\n                      }\r\n\r\n                    case 'toggle':\r\n                      return {\r\n                        todos: todos.map(todo=>{\r\n                          return todo.id===payload\r\n                                ?{\r\n                                    ...todo,\r\n                                    complete:!todo.complete\r\n                                }\r\n                                :todo\r\n                        })\r\n                      }\r\n                    default:\r\n                  }\r\n                  return state\r\n                }\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}